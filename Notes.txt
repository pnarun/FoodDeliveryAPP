Props: Arguments passing to react components
Conflict driven UI: Control UI visibility based on the data we get from backend
Use unique id as a key while calling multiple react components

Two types of Export/Import
1.  Default Export/Import: Works only when you want to export a single Component from a single file.
    - export default Component;
    - import Component from "path";
2.  Named Export/Import: Works when you want to export multiple components from a single file.
    - export const Component;
    - import { Component } from "path";

React Hooks - Normal JS utility functions
    - useState() : popularly used
        - Super powerful State variables in React
        - Whenever a state variable updates, react will re-render the component.
        - useState() returns an array where index 0 has state variable and index 1 has a function which updates the state variable which requires an argument nothing but an updated varible which need to replicate on state variable.
    - useEffect() : less used

React Fiber (Reconciliation Algorithm) - React16
1. Virtual DOM is an Object representation of Actual DOM.
2. Actual DOM is an actual DOM we write.
3. When State variable updates, a new object is formed which compares with Virutal DOM and update the difference on Actual DOM.
4. This is done by Difference Algorithm also known as Reconciliation Algorithm.

Monolith Architectre: A single project has services like API, UI, Auth, DB, SMS etc.. which need to build everytime a small change occurs.
Microservices: A seperate project for each services to do its job seperately by talking to each other.
    - The serices can be accessed using different ports ex, 1234:UI, 1004:DB etc..

Two approaches
1. Load data -> API call -> Render
2. Load data -> Render -> API call -> Re-Render

Second approach is used in React to provide better UX instead of waiting like 500ms for UI to provide response and render them in first approach.
Here comes the useEffect() into picture and which will be called once the Body component is rendered/loaded.

1. Don't use useState outside compnents and inside conditional loops.
2. useEffect accepts two parameters, callback function and a dependency array.
    - If no dependency array means the useEffect will be called everytime the component renders.
    - If empty dependency array means the useEffect will be called only once when the component renders for first time.
    - If dependency array has something, let say a useState variable, then the useEffect will be called each time the useState variable updates.

1. Use createBrowserRouter to create all router that are required and RouterProvider to render the created router.
2. These two packages are available from react-router-dom which handles error page as well with a simple and custom message.
3. useRouteError hook can be used to show more info on the  routing error.
4. Outlet is used to render child components.
5. If we use <a href="" /> to redirect to another page, the whole page will be loaded.
6. If we use <Link to="" /> from react-router-dom, only that particular compnent get loaded instead of whole page.
7. Since only components are changing instead of page, we have only one page for this application and hence it is called Single Page Application.

There are 2 types of Routing in web apps 
1. Client Side Routing
    - The decision to show pages/components are taken without API
2. Server Side Routing
    - The decision to show pages/components are taken with the help of API

useParams() is used to get the data paased through link(url).

Class based component
    - A normal javascript class which renders(returns) react component jsx.
    - The arguments will be passed through constructor and use this.props. to get the parameters.
    - constructoris the best place to receive arguments and to create state variables.
    - Use this.setState() to update state variables and Never update state variables directly. 
    - Lifecycle methods
            + constructor
            + render
            + componentDidMount - This will be called once the component is completely rendered.
                - This is used to make API call.
                - when there are multiple child components, the order of life cycle will be,
                    # Parent constructor    
                    # Parent render
                        # First child constructor
                        # First child render
                        # Second child constructor
                        # Second child render
                        <DOM UPDATED - IN SINGLE BATCH>
                        # First child componentDidMount
                        # Second child componentDidMount
                    # Parent componentDidMount
                    - Reference : https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
                    - Loading the component has two phases: Render phase and Commit phase
                    - First render of all child components are done and then the commit phase of all child components are done.
                    - This behaviour is because, updating the DOM is costlier and react find a way of updating the dom at the last after rendering all child components. 
                    - In this way, the DOM updates at the end only once after rendering all child components and hence the react is fast.
            + componentDidUpdate - This will be called once the state variables get updated, once after componentDidMount called.
            + componentWillUnmount - This will be called just before you move out of the page.

I used Google sheets as API end point with dummy data and here are the credentials.
Reference article to do this api: https://dev.to/varshithvhegde/easy-way-to-create-your-own-api-for-free-1mbc#how-to-create-api-using-google-sheets
Credentials for Dummy data present in google sheet which can be accessed with api call,
Deploy ID: AKfycbwSQ9MN73kxdfze-ZCmg_bEi3MwO6c9b4HKl3JCktm7s0ciCZa_9_8XJ2ndQYxcpLCi
Deploy url: https://script.google.com/macros/s/AKfycbwSQ9MN73kxdfze-ZCmg_bEi3MwO6c9b4HKl3JCktm7s0ciCZa_9_8XJ2ndQYxcpLCi/exec
This need to update with some actual data of Swiggy so that I can get Restaurant details and menu without any issue.

Swiggy data Google sheets api credentials
Deploy ID: AKfycbyXkaVRiGHydgw0yET2MsyrpVgParAalFD641dFRZtkYrAB6Zs5tg3e_m1yaED_f85m
Deploy url: https://script.google.com/macros/s/AKfycbyXkaVRiGHydgw0yET2MsyrpVgParAalFD641dFRZtkYrAB6Zs5tg3e_m1yaED_f85m/exec

Chunking - Code splitting - Dynamic Bundling - lazy loading - on demand loading
- Break down app into smaller chunks to works faster
- Suspense component from react can be used while lazy loading to handle the time that takes to load the new feature(here Grocery);

SASS and SCSS - Writing CSS with some super powers
Style components - To write CSS specifically for components - https://styled-components.com
Matrial UI, Bootstrap, Chakra UI, Ant design are other options we can explore for CSS.
Tailwind CSS : https://tailwindcss.com/
    - Configuring Tailwind CSS : https://tailwindcss.com/docs/installation/framework-guides/parcel
    - This uses postcss to transfer CSS along with CSS